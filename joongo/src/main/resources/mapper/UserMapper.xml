<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dbProject.joongo.mapper.UserMapper">

    <resultMap id="UserDTOResultMap" type="com.dbProject.joongo.dto.user.UserDTO">
        <id column="user_id" property="userId" />
        <result column="user_name" property="userName" />
        <result column="nickname" property="nickname" />
        <result column="email" property="email" />
        <result column="location" property="location" />
        <result column="money" property="money" />
        <result column="phone_number" property="phoneNumber" javaType="java.lang.String" />
    </resultMap>

    <select id="selectUserById" parameterType="int" resultMap="UserDTOResultMap">
        SELECT
            user_id,
            user_name,
            nickname,
            email,
            location,
            money,
            CAST(CONCAT(COALESCE(tel_1, ''), '-', COALESCE(tel_2, '')) AS CHAR) AS phone_number        FROM USERS
        WHERE user_id = #{userId}
    </select>


    <!-- 사용자 추가 -->
    <insert id="insertUser" parameterType="com.dbProject.joongo.domain.User" useGeneratedKeys="true">
        INSERT INTO USERS (user_name, nickname, user_password, email, tel_1, tel_2, location)
        VALUES (#{userName}, #{nickname}, #{userPassword}, #{email}, #{tel_1}, #{tel_2}, #{location});
    </insert>

    <!-- 마지막 삽입 사용자 ID 조회 (ID) -->
    <select id="getLastInsertId" resultType="int">
        SELECT LAST_INSERT_ID();
    </select>


    <!-- 데이터베이스 내 가장 큰 ID 조회 -->
    <select id="getLastIdInDatabase" resultType="int">
        SELECT MAX(user_id) FROM USERS;
    </select>

    <!-- 모든 사용자 조회 -->
    <select id="selectAllUsers" resultType="com.dbProject.joongo.domain.User">
        SELECT * FROM USERS
    </select>

    <!-- 사용자 수정 -->
    <update id="updateUser" parameterType="com.dbProject.joongo.domain.User">
        UPDATE USERS
        SET user_name = #{userName},
            nickname = #{nickname},
            user_password = #{userPassword},
            email = #{email},
            tel_1 = #{tel_1},
            tel_2 = #{tel_2},
            location = #{location},
            user_role = #{userRole},
            user_status = #{userStatus},
            money = #{money}
        WHERE user_id = #{userId}
    </update>

    <!-- 사용자 삭제 -->
    <delete id="deleteUserById" parameterType="int">
        DELETE FROM USERS WHERE user_id = #{userId}
    </delete>

    <!-- 이메일로 사용자 조회 -->
    <!-- 베타락만 가능
         공유락을 하면 select 는 여러 트랜잭션에서 같이 할 수 있기 때문에
         email 검증이 모두 통과하게 됨
         그 후 insert 에서 데드락이 발생 , 레코드 락 요청 시
    -->
    <select id="selectUserByEmail" parameterType="string" resultType="com.dbProject.joongo.domain.User">
        SELECT * FROM USERS WHERE email = #{email} FOR UPDATE;
    </select>

    <!-- 이메일과 비밀번호로 사용자 조회 -->
    <select id="selectUserByEmailAndPassword" parameterType="map" resultType="com.dbProject.joongo.domain.User">
        SELECT *
        FROM USERS
        WHERE email = #{email} AND user_password = #{userPassword}
    </select>

    <select id="selectProductsByUserId" parameterType="int" resultType="com.dbProject.joongo.domain.Product">
        SELECT * FROM PRODUCTS WHERE user_id = #{userId}
    </select>

    <update id="updateUserMoney">
        UPDATE USERS
        SET money = #{money}
        WHERE user_id = #{userId}
    </update>

</mapper>
