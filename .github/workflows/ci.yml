name: Build and Deploy Spring Boot and React to AWS EC2

on:
  push:
    branches: 
      - main


env:
  PROJECT_NAME: Joonggonara
  CODE_DEPLOY_APP_NAME: joonggonara-app
  DEPLOYMENT_GROUP_NAME: joonggonara-group

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout 코드
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK 17 설치
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew에 실행 권한 부여
      - name: Grant execution permission for Gradlew
        run: chmod +x ./joongo/gradlew

      # 4. 백엔드 빌드
      - name: Build Spring Boot Backend
        run: |
          cd joongo
          ./gradlew clean build -x test

      # 5. 프론트엔드 설치 및 빌드
      - name: Build React Frontend
        run: |
          cd joongo/src/main/frontend
          npm install
          CI='false' npm run build

      # 6. 프론트엔드 빌드 파일 이동
      - name: Move React Build to Backend
        run: |
          cp -r joongo/src/main/frontend/build/* joongo/src/main/resources/static/

      # 7. 프로젝트 압축
      - name: Make ZIP File
        run: |
          cd joongo
          zip -r ../${{ env.PROJECT_NAME }}.zip .

      # 8. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Debugging Logs
      - name: Debugging Info
        run: |
          echo "S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}"
          echo "PROJECT_NAME: ${{ env.PROJECT_NAME }}"
          aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }}


      # 9. S3로 파일 업로드
      - name: Upload to S3
        run: |
          aws s3 cp ./${{ env.PROJECT_NAME }}.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/${{ env.PROJECT_NAME }}.zip

      # 10. CodeDeploy로 배포
      - name: Deploy via AWS CodeDeploy
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=${{ env.PROJECT_NAME }}.zip
